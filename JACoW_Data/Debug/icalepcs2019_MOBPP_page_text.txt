














ICALEPCS2019 - Table of Session: MOBPP (Software Technology Evolution 1)


MOBPP —  Software Technology Evolution 1   (07-Oct-19   11:30—13:00)
Chair: G. Chiozzi, ESO, Garching bei Muenchen, Germany


Paper
Title
Page



MOBPP01
PLCverif Re-engineered: An Open Platform for the Formal Analysis of PLC Programs
21


 

E. Blanco Viñuela, D. Darvas
                       CERN, Geneva, Switzerland
V. Molnár
                       BUTE, Budapest, Hungary

 


 

Programmable Logic Controllers (PLC) are widely used for industrial automation in industry and at CERN. The reliability of PLC software is crucial, but typically only testing is used to validate it. Our work targets the use of formal verification in practical ways for many years, which showed that it can be beneficial and practically applicable to various PLC programs. In this paper, we present PLCverif, our platform for formal analysis of PLC programs which has largely enhanced the quality of the deployed PLC software. By re-engineering the previous internal prototype tool, we built PLCverif to be an open, extensible platform that can be used not only for CERN’s specific PLC programs. PLCverif is licensed under an open source license, allowing the interested parties to use and extend it.

 






Slides MOBPP01 [5.586 MB]
        
 


DOI •
reference for this paper 
              ※ https://doi.org/10.18429/JACoW-ICALEPCS2019-MOBPP01

 


About •
paper received ※ 27 September 2019       paper accepted ※ 09 October 2019        issue date ※ 30 August 2020
 


Export •
reference for this paper using 
              ※ BibTeX, 
              ※ LaTeX, 
              ※ Text/Word, 
              ※ RIS, 
              ※ EndNote (xml)

 


 



MOBPP02
Designing a Control System for Large Experimental Devices Using Web Technology
28


 

W. Zheng, N. Fu, S. Li, Y. Wang, F.Y. Wu, M. Zhang
                       Huazhong University of Science and Technology, State Key Laboratory of Advanced Electromagnetic Engineering and Technology,, Hubei, People’s Republic of China

 


 

EPICS is mature in accelerator community. However, there are endeavors to improve existing control system software like Tango and EPICS 7 mainly driven by the needs of flexibility of the control system and the development of computer technology. This paper presents a new way of building a large experimental device control system using web technology instead of EPICS toolkit. The goal is to improve the interoperability of the control system allowing different component in the control system to talk to each other effortlessly. An abstraction of the control system is made. The control system components are abstracted into resources. The accessing of the resources is done via standard HTTP RESTful web API. HMI is based on HTML and JavaScript in browsers. Web Socket is used for event distribution. The main feature of this design is that all interfaces in the system are based on open web standards, which are interoperable among almost all kinds of devices. The paper also presents a software toolkit to build this kind of control system. A control system for a diagnostic on J-TEXT tokamak built using this toolkit will be presented.

 






Slides MOBPP02 [45.437 MB]
        
 


DOI •
reference for this paper 
              ※ https://doi.org/10.18429/JACoW-ICALEPCS2019-MOBPP02

 


About •
paper received ※ 26 September 2019       paper accepted ※ 08 October 2019        issue date ※ 30 August 2020
 


Export •
reference for this paper using 
              ※ BibTeX, 
              ※ LaTeX, 
              ※ Text/Word, 
              ※ RIS, 
              ※ EndNote (xml)

 


 



MOBPP03
Fault Tolerant, Scalable Middleware Services Based on Spring Boot, REST, H2 and Infinispan
33


 

W. Sliwinski, K. Kaczkowski, W. Zadlo
                       CERN, Geneva, Switzerland

 


 

Control systems require several, core services for work coordination and everyday operation. One such example is Directory Service, which is a central registry of all access points and their physical location in the network. Another example is Authentication Service, which verifies callers identity and issues a signed token, which represents the caller in the distributed communication. Both cases are real life examples of middleware services, which have to be always available and scalable. The paper discusses design decisions and technical background behind these two central services used at CERN. Both services were designed using latest technology standards, namely Spring Boot and REST. Moreover, they had to comply with demanding requirements for fault tolerance and scalability. Therefore, additional extensions were necessary, as distributed in-memory cache (using Apache Infinispan), or Oracle database local mirroring using H2 database. Additionally, the paper will explain the tradeoffs of different approaches providing high-availability features and lessons learnt from operational usage.

 






Slides MOBPP03 [6.846 MB]
        
 


DOI •
reference for this paper 
              ※ https://doi.org/10.18429/JACoW-ICALEPCS2019-MOBPP03

 


About •
paper received ※ 27 September 2019       paper accepted ※ 08 October 2019        issue date ※ 30 August 2020
 


Export •
reference for this paper using 
              ※ BibTeX, 
              ※ LaTeX, 
              ※ Text/Word, 
              ※ RIS, 
              ※ EndNote (xml)

 


 



MOBPP04
The ELT M1 Local Control Software: From Requirements to Implementation
38


 

L. Andolfato, J. Argomedo, C. Diaz Cano, R. Frahm, T.R. Grudzien, N. Kornweibel, D. Ribeiro Gomes dos Santos, J. Sagatowski
                       ESO, Garching bei Muenchen, Germany
C.M. Silva
                       CSW, Coimbra, Portugal

 


 

This paper presents the ELT M1 Local Control Software. M1 is the 39 m primary mirror of the Extremely Large Telescope composed of 798 hexagonal segments. Each segment can be controlled in piston, tip, and tilt, and provides several types of sensor data, totaling 24000 I/O points. The control algorithm, used to dynamically maintain the alignment and the shape of the mirror, is based on three pipelined stages dedicated to collect the sensors’ measurements, compute new references, and apply them to the actuators. Each stage runs at 500 Hz and the network traffic produced by devices and servers is close to 1.2 million UDP packets/s. The reliability of this large number of devices is improved by the introduction of a failure detection isolation and recovery SW component. The paper summarizes the main SW requirements, presents the architecture based on a variation of the estimator/controller/adapter design pattern, and provides details on the implementation technologies, including the SW platform and the application framework. The lessons learned from deploying the SW on CPUs with different NUMA architectures and from the adoption of different testing strategies are also described.

 






Slides MOBPP04 [5.071 MB]
        
 


DOI •
reference for this paper 
              ※ https://doi.org/10.18429/JACoW-ICALEPCS2019-MOBPP04

 


About •
paper received ※ 20 September 2019       paper accepted ※ 09 October 2019        issue date ※ 30 August 2020
 


Export •
reference for this paper using 
              ※ BibTeX, 
              ※ LaTeX, 
              ※ Text/Word, 
              ※ RIS, 
              ※ EndNote (xml)

 


 



MOBPP05
Dynamic Control Systems: Advantages and Challenges
46


 

S. Rubio-Manrique, G. Cuní
                       ALBA-CELLS Synchrotron, Cerdanyola del Vallès, Spain

 


 

The evolution of Software Control Systems introduced the usage of dynamically typed languages, like Python or Ruby, that helped Accelerator scientists to develop their own control algorithms on top of the standard control system. This new high-level layer of scientist-developed code is prone to continuous change and no longer restricted to fixed types and data structures as low-level control systems used to be. This provides great advantages for scientists but also big challenges for the control engineers, that must integrate this dynamic developments into existing systems like user interfaces, archiving or alarms.

 






Slides MOBPP05 [2.267 MB]
        
 


DOI •
reference for this paper 
              ※ https://doi.org/10.18429/JACoW-ICALEPCS2019-MOBPP05

 


About •
paper received ※ 30 September 2019       paper accepted ※ 09 October 2019        issue date ※ 30 August 2020
 


Export •
reference for this paper using 
              ※ BibTeX, 
              ※ LaTeX, 
              ※ Text/Word, 
              ※ RIS, 
              ※ EndNote (xml)

 


 



MOBPP06
20 Years of World Class Telescope Control Systems Evolution
52


 

T.D. Gaggstatter, I. Arriagada, P.E. Gigoux, R. Rojas
                       Gemini Observatory, Southern Operations Center, La Serena, Chile
J. Molgo
                       GMTO Corporation, Pasadena, USA
F. Ramos
                       Grantecan S.A., Center for Astrophysics in La Palma, Brena Baja, Spain

 


 

This paper analyzes the evolution of control systems for astronomical telescopes. For this comparison we look through the lens of three world class telescopes: Gemini, GTC and GMT. The first two have been in operations for twenty and ten years respectively, whilst the latter is currently under construction. With a planned lifetime of 50+ years, obsolescence management is a common issue among these facilities. For the telescopes currently under operation, their real-time distributed control systems were engineered using state-of-the-art software and hardware available at the time of their design and construction. GMT and newer telescopes are no different in this regard, but are aiming to capitalize on the experiences of the previous generations so they can be better prepared to support their operations. We highlight the differences and common aspects of their software and hardware infrastructure (operating systems, middleware, user interfaces), the pros and cons of each choice and what has been done and what is being planned for obsolescence management.

 






Slides MOBPP06 [6.029 MB]
        
 


DOI •
reference for this paper 
              ※ https://doi.org/10.18429/JACoW-ICALEPCS2019-MOBPP06

 


About •
paper received ※ 30 September 2019       paper accepted ※ 09 October 2019        issue date ※ 30 August 2020
 


Export •
reference for this paper using 
              ※ BibTeX, 
              ※ LaTeX, 
              ※ Text/Word, 
              ※ RIS, 
              ※ EndNote (xml)

 


 




